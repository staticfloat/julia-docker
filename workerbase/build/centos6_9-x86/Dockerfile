## This file was autogenerated
# Do not edit directly; edit the .harbor files
#
# To build this docker image via `make`, run `make build-centos6_9-x86` in the `workerbase` directory
# To build this docker image manually, run `docker build --pull -t staticfloat/julia_workerbase:centos6_9-x86 .`

FROM staticfloat/centos-i386:centos6

# This enables putting `linux32` before commands like `./configure` and `make`
ARG L32=linux32

MAINTAINER Elliot Saba <staticfloat@gmail.com>
USER root

# We create a `buildworker` user so that we don't have to run everything as root
RUN useradd -m -s /bin/bash buildworker

# This is where we'll do all our work, so make it now
RUN mkdir -p /src
RUN chown buildworker:buildworker /src
## Download and install needed build dependencies for x86_64 yum-based systems
USER root

# Start with tools that I love and always need by my side
RUN ${L32} yum update -y
RUN ${L32} yum install -y htop tmux vim curl net-tools which gdb pkg-config

# The "nice-to-have"s
RUN ${L32} yum install -y patchelf

# Dependencies we need to build Julia
RUN ${L32} yum install -y gcc gcc-c++ gcc-gfortran m4 make openssl openssl-devel patch

# Dependencies we need to build git
RUN ${L32} yum install -y curl-devel expat-devel gettext-devel perl-devel

# Dependencies we need to build gcc
RUN ${L32} yum install -y wget bzip2 tar

# Dependencies we need to build python
RUN ${L32} yum install -y zlib-devel bzip2-devel

# Dependencies we need to build tar
RUN ${L32} yum install -y xz

# Dependencies we need to do nightly SRPM packaging
RUN ${L32} yum install -y rpmdevtools
# Download and install `tar` because some machines have it too old and don't
# know what `.xz` files are.  Build it first so that we can use it to extract
# our other tools.  Yes, this means this is the only tool that's not built with
# our new GCC, but that's okay.
## Install tar
ARG tar_version=1.29
ARG tar_url=https://ftp.gnu.org/gnu/tar/tar-${tar_version}.tar.gz

USER buildworker
WORKDIR /src

# Download/extract tar
RUN curl -q -# -L "${tar_url}" -o tar-${tar_version}.tar.gz
RUN tar zxf tar-${tar_version}.tar.gz

# Build the tar sources!
WORKDIR /src/tar-${tar_version}
# Set CPPFLAGS because of this link: https://goo.gl/lKju1q
RUN $L32 ./configure --prefix=/usr/local CPPFLAGS="-fgnu89-inline"
RUN $L32 make -j4

# Install tar
USER root
RUN $L32 make install

# We need to pretend to be `gtar` as well
RUN ln -s /usr/local/bin/tar /usr/local/bin/gtar

# Now cleanup /src
WORKDIR /src
# Sigh, see https://github.com/docker/docker/issues/13451 for context
RUN rm -rf tar-${tar_version}* || \
    (mv tar-${tar_version}/confdir3/confdir3 tar-${tar_version}/confdir4 && \
    rm -rf tar-${tar_version}*)

# Download and install `gcc` because we want only the latest in cutting-edge
# compiler technology, and also because LLVM is a needy little piece of software
## Install GCC
ARG binutils_version=2.28
ARG binutils_url=https://ftp.gnu.org/gnu/binutils/binutils-${binutils_version}.tar.bz2
ARG binutils_targets=x86_64-linux-gnu,i686-linux-gnu,aarch64-linux-gnu,arm-linux-gnueabihf,powerpc64le-linux-gnu,x86_64-w64-mingw32,i686-w64-mingw32
ARG gcc_version=7.1.0
ARG gcc_url=https://mirrors.kernel.org/gnu/gcc/gcc-${gcc_version}/gcc-${gcc_version}.tar.bz2

USER buildworker
WORKDIR /src

# Download/extract both binutils and gcc
RUN curl -q -# -L "${binutils_url}" -o binutils-${binutils_version}.tar.bz2
RUN curl -q -# -L "${gcc_url}" -o gcc-${gcc_version}.tar.bz2
RUN tar jxf binutils-${binutils_version}.tar.bz2
RUN tar jxf gcc-${gcc_version}.tar.bz2

# Build binutils!
WORKDIR /src/binutils-${binutils_version}
RUN ${L32} ./configure --prefix=/usr/local --enable-targets=${binutils_targets} ${EXTRA_BINUTILS_CONFIG_FLAGS}
RUN ${L32} make -j4

# Install binutils
USER root
RUN ${L32} make install


# Build gcc!
USER buildworker
WORKDIR /src/gcc-${gcc_version}
RUN ${L32} contrib/download_prerequisites
RUN mkdir -p /src/gcc-${gcc_version}_build
WORKDIR /src/gcc-${gcc_version}_build
RUN ${L32} /src/gcc-${gcc_version}/configure --prefix=/usr/local --enable-host-shared --enable-threads=posix --enable-languages=c,c++,fortran --disable-multilib ${EXTRA_GCC_CONFIG_FLAGS}
RUN ${L32} make -j4

# Install gcc
USER root
RUN ${L32} make install

# Symlink LTO plugin into binutils directory
RUN mkdir -p /usr/local/lib/bfd-plugins
RUN ln -s $(find /usr/local/libexec/gcc/ -name liblto_plugin.so) /usr/local/lib/bfd-plugins/

# Setup environment variables so that GCC takes precedence from this point forth
ENV PATH "/usr/local/bin:$PATH"
ENV LD_LIBRARY_PATH "/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH"
ENV AR "/usr/local/bin/gcc-ar"
ENV RANLIB "/usr/local/bin/gcc-ranlib"
ENV NM "/usr/local/bin/gcc-nm"

# Set up a symlink for the ubiquitous cc
RUN ln -s $(which gcc) /usr/local/bin/cc

# Now cleanup /src
WORKDIR /src
RUN rm -rf gcc-${gcc_version}*
RUN rm -rf binutils-${binutils_version}*

# Download and install `git` because some of the distributions we build on are
# old enough that `git` isn't even installable from the default distributions
## Install git
ARG git_version=2.11.0
ARG git_url=https://github.com/git/git/archive/v${git_version}.tar.gz

USER buildworker
WORKDIR /src

# Download, extract, and build git
RUN curl -q -# -L "${git_url}" -o git-${git_version}.tgz
RUN tar zxf git-${git_version}.tgz
WORKDIR /src/git-${git_version}
RUN ${L32} make prefix=/usr/local all -j4

# Install git
USER root
RUN ${L32} make prefix=/usr/local install

# cleanup /src
WORKDIR /src
RUN rm -rf git-${git_version}*

# Download and install `cmake` because LLVM again.  Whiner.
## Install cmake into /usr/local
ARG cmake_version=3.6.3
ARG cmake_url=https://cmake.org/files/v3.6/cmake-${cmake_version}.tar.gz

USER buildworker
WORKDIR /src

# Unfortunately, we have to pass `-k` to `curl` because cmake.org has weird SSL
# certificates, and old versions of `curl` can't deal with it.  :(
RUN curl -q -# -L -k "${cmake_url}" -o cmake-${cmake_version}.tar.gz
RUN tar zxf cmake-${cmake_version}.tar.gz


# Build the cmake sources!
WORKDIR /src/cmake-${cmake_version}
RUN ${L32} ./configure --prefix=/usr/local
RUN ${L32} make -j4

# Install as root
USER root
RUN ${L32} make install

# Now cleanup /src
WORKDIR /src
RUN rm -rf cmake-${cmake_version}*

# Download and install `python` because buildbot doesn't like ancient versions
## Install python
ARG python_version=2.7.13
ARG python_url=https://www.python.org/ftp/python/${python_version}/Python-${python_version}.tar.xz
ARG pip_url=https://bootstrap.pypa.io/get-pip.py

USER buildworker
WORKDIR /src

# Download/extract both Python and pip
RUN curl -q -# -L "${python_url}" -o Python-${python_version}.tar.xz
RUN curl -q -# -L "${pip_url}" -o get-pip.py
RUN tar Jxf Python-${python_version}.tar.xz

# Build the python sources!
WORKDIR /src/Python-${python_version}
RUN ${L32} ./configure --prefix=/usr/local
RUN ${L32} make -j4

# Install python
USER root
RUN ${L32} make install

# Install pip and install virtualenv (all as root, of course)
RUN python /src/get-pip.py
RUN pip install virtualenv

# Now cleanup /src
WORKDIR /src
RUN rm -rf Python-${python_version}*
RUN rm -f get-pip.py

# Download and install `ccache` to speed up compilation
## Install ccache
ARG ccache_version=3.3.4
ARG ccache_url=https://www.samba.org/ftp/ccache/ccache-${ccache_version}.tar.xz

USER buildworker
WORKDIR /src

# Download, extract, and build ccache
RUN curl -q -# -L "${ccache_url}" -o ccache-${ccache_version}.tar.xz
RUN tar Jxf ccache-${ccache_version}.tar.xz
WORKDIR /src/ccache-${ccache_version}
# We need to patch ccache's configure system since it's ancient
RUN curl -L 'https://raw.githubusercontent.com/jd-gascuel/ccache/437b5ff4ca7bbcabd225816132e4665180cfa18e/config.guess' > config.guess
RUN curl -L 'https://raw.githubusercontent.com/jd-gascuel/ccache/437b5ff4ca7bbcabd225816132e4665180cfa18e/config.sub' > config.sub
RUN ${L32} ./configure --prefix=/usr/local
RUN ${L32} make all -j4

# Install ccache
USER root
RUN ${L32} make install

# cleanup /src
WORKDIR /src
RUN rm -rf ccache-${ccache_version}*
USER root

# We need to override ld.so.conf to search /usr/local before /usr
RUN echo "/usr/local/lib64" > /etc/ld.so.conf.new; \
    echo "/usr/local/lib" >> /etc/ld.so.conf.new; \
    cat /etc/ld.so.conf >> /etc/ld.so.conf.new; \
    mv /etc/ld.so.conf.new /etc/ld.so.conf; \
    ldconfig

# These are our final words. Always.
WORKDIR /

# Use /entrypoint.sh hack to get around the whole ${L32} ARG not being used in ENTRYPOINT thing.
RUN echo "#!/bin/bash" > /entrypoint.sh; \
    echo "${L32} \"\$@\"" >> /entrypoint.sh; \
    chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
CMD ["/bin/bash"]
USER buildworker
