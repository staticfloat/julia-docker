include ../common.mk

# By default, build all the dockerfiles
all: dockerfiles

# All the versions we'll generate Dockerfiles for
VERS := $(VERS) v0.4.0 v0.4.1 v0.4.2 v0.4.3 v0.4.4 v0.4.5 v0.4.6 v0.4.7
VERS := $(VERS) v0.5.0 v0.5.1 v0.5.2
VERS := $(VERS) v0.6.0 v0.6.1 v0.6.2
VERS := $(VERS) nightly

# Make some short version mappings
SHORT_VERS := $(shell (for v in $(VERS); do echo $${v%.*}; done) | sort | uniq)
# But don't let "nightly" into the short version mappings
SHORT_VERS := $(filter-out nightly,$(SHORT_VERS))

# Convenience function to take in `v0.5` and spit out `v0.5.2` as the highest
# matching version.  (At least, it was at the time of writing this comment)
define expand_version
$(lastword $(sort $(filter $(1)%,$(VERS))))
endef

# Convenience function to build the docker tag for an image
define julia_tag_name
$(strip staticfloat/julia:$(firstword $(subst -, ,$(2)))-$(1))
endef

# Arch-dependent values
ARCHS=x64 x86 ppc64le aarch64 armv7l
IMAGE-x64=multiarch/debian-debootstrap:amd64-jessie
IMAGE-x86=multiarch/debian-debootstrap:i386-jessie
IMAGE-ppc64le=multiarch/debian-debootstrap:ppc64el-jessie
IMAGE-aarch64=multiarch/debian-debootstrap:arm64-jessie
IMAGE-armv7l=multiarch/debian-debootstrap:armhf-jessie

# Only on x86 and armv7l will we set L32
L32-x86=linux32
L32-armv7l=linux32

define major_version
$(strip $(shell echo $(1) | sed -E -n 's/v?([0-9]+\.[0-9]+).*/\1/p'))
endef

# Grumble grumble inconsistency
TAR_ARCH-x64=x86_64
TAR_ARCH-x86=i686
TAR_ARCH-ppc64le=ppc64le
TAR_ARCH-aarch64=aarch64
TAR_ARCH-armv7l=arm
UP_ARCH-x64=x64
UP_ARCH-x86=x86
UP_ARCH-ppc64le=ppc64le
UP_ARCH-aarch64=aarch64
UP_ARCH-armv7l=arm

# grumble grumble EVEN MORE INCONSISTENCY
TAR_NIGHTLY_ARCH-x64=64
TAR_NIGHTLY_ARCH-x86=32
TAR_NIGHTLY_ARCH-ppc64le=ppc64
TAR_NIGHTLY_ARCH-aarch64=aarch64
TAR_NIGHTLY_ARCH-armv7l=arm


define JULIA_URL
$(strip https://julialang-s3.julialang.org/bin/linux/$(UP_ARCH-$(1))/$(call major_version,$(2))/julia-$(subst v,,$(2))-linux-$(TAR_ARCH-$(1)).tar.gz)
endef

define JULIA_NIGHTLY_URL
$(strip https://julialangnightlies-s3.julialang.org/bin/linux/$(UP_ARCH-$(1))/julia-latest-linux$(TAR_NIGHTLY_ARCH-$(1)).tar.gz)
endef

define build_dockerfile
build/$(2)/Dockerfile.$(1): Makefile Dockerfile
	@mkdir -p $$(dir $$@)
	@echo $(2)-$(1)
	@echo "## This file was autogenerated" > "$$@"
	@echo "# Do not edit directly; edit Makefile and top-level Dockerfile" >> "$$@"
	@echo "FROM $(IMAGE-$(1))" >> "$$@"
	@echo "ARG L32=\"$(L32-$(1))\"" >> "$$@"
	@echo >> "$$@"
	@if [ "$(2)" = "nightly" ]; then \
		cat Dockerfile | sed -e 's&{{JULIA_URL}}&$(call JULIA_NIGHTLY_URL,$(1))&g' | grep -v .tar.gz.asc >> "$$@"; \
	else \
		cat Dockerfile | sed -e 's&{{JULIA_URL}}&$(call JULIA_URL,$(1),$(2))&g' >> "$$@"; \
	fi

build-$(2)-$(1): build/$(2)/Dockerfile.$(1)
	$(DOCKER_BUILD) --pull -t $(call julia_tag_name,$(1),$(2)) -f build/$(2)/Dockerfile.$(1) build/$(2)

push-$(2)-$(1):
	docker push $(call julia_tag_name,$(1),$(2))
endef

# Redo some of that work for the shortened names, which don't actually build
# an image, but just re-tag a previously built image
define build_retags
push-$(2)-$(1):
	docker push $(call julia_tag_name,$(1),$(2))

retag-$(2)-$(1):
	docker tag $(call julia_tag_name,$(1),$(call expand_version,$(2))) $(call julia_tag_name,$(1),$(2))
endef

# Construct the actual build targets for all the dockerfiles
$(foreach v,$(VERS),$(foreach a,$(ARCHS),$(eval $(call build_dockerfile,$(a),$(v)))))

# Build "dockerfiles" target that assembles all Dockerfiles
$(foreach v,$(VERS),$(foreach a,$(ARCHS),$(eval $(call add_dep,dockerfiles,build/$(v)/Dockerfile.$(a)))))

# Build "buildall" target that attempts to build every Dockerfile in the room,
# but only from the ones that our build architecture can manage.
$(foreach v,$(VERS),$(foreach a,$(BUILD_ARCHS),$(eval $(call add_dep,buildall,build-$(v)-$(a)))))

# Build "pushall" target that pushes up the result of "buildall"
$(foreach v,$(VERS),$(foreach a,$(BUILD_ARCHS),$(eval $(call add_dep,pushall,push-$(v)-$(a)))))

# Also push up the short tag names as well. :)
$(foreach v,$(SHORT_VERS),$(foreach a,$(ARCHS), $(eval $(call build_retags,$(a),$(v)))))
$(foreach v,$(SHORT_VERS),$(foreach a,$(BUILD_ARCHS),$(eval $(call add_dep,pushall,retag-$(v)-$(a)))))
$(foreach v,$(SHORT_VERS),$(foreach a,$(BUILD_ARCHS),$(eval $(call add_dep,pushall,push-$(v)-$(a)))))

clean:
	rm -rf build
